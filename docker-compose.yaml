services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.1
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticdata:/data
    networks:
      - teleye-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_CONSOLE_ADDRESS=:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
    command: server /data
    networks:
      - teleye-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - teleye-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    container_name: app
    build:
      context: ./app
      dockerfile: Dockerfile
    command: bash -c "uv run fastapi run main.py --host 0.0.0.0 --port 8000"
    volumes:
    - ./app:/app
    - elasticdata:/data/elasticsearch
    ports:
      - "8000:8000"
    env_file:
      - ./app/.env
    networks:
      - teleye-network
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  celery-worker:
    build:
      context: ./app
    restart: unless-stopped
    container_name: celery-worker
    command: uv run celery -A celery_worker worker -l INFO -E
    env_file:
      - ./app/.env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - teleye-network
    volumes:
      - prometheus_multiproc:/tmp/prometheus_multiproc

  celery-flower:
    build:
      context: ./app
    restart: unless-stopped
    container_name: celery-flower
    command: uv run celery flower -A celery_worker --broker=redis://redis:6379/0 --port=5555
    env_file:
      - ./app/.env
    environment:
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_started
    networks:
      - teleye-network
  

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitor/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - teleye-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./monitor/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    env_file:
      - ./monitor/grafana/config.monitoring
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - teleye-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_multiproc:
    driver: local
  elasticdata:
    driver: local
  miniodata:
    driver: local

networks:
  teleye-network:
    name: teleye-network
    driver: bridge
